name: Security Audit

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security audit daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust:
          - stable
          - beta
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        # Fetch full history for better security analysis
        fetch-depth: 0

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ matrix.rust }}
        components: clippy, rustfmt

    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        # Cache for multiple targets
        key: ${{ matrix.rust }}

    - name: Install security tools
      run: |
        cargo install --force cargo-audit cargo-deny
        # Install additional security scanners
        cargo install --force cargo-geiger cargo-outdated

    - name: Run cargo audit
      run: |
        # Update advisory database
        cargo audit --version
        # Run comprehensive audit
        cargo audit --deny warnings --deny unmaintained --deny unsound --deny yanked

    - name: Run cargo deny
      run: |
        # Check for banned dependencies, licenses, and security issues
        cargo deny --manifest-path Cargo.toml check all

    - name: Run cargo clippy with security lints
      run: |
        cargo clippy --all-targets --all-features -- \
          -D warnings \
          -D clippy::all \
          -D clippy::pedantic \
          -D clippy::security \
          -D clippy::suspicious \
          -W clippy::todo \
          -W clippy::unimplemented \
          -W clippy::panic

    - name: Check for unsafe code
      run: |
        # Use cargo-geiger to identify unsafe code usage
        cargo geiger --format GitHubMarkdown || true

    - name: Check dependency freshness  
      run: |
        # Check for outdated dependencies
        cargo outdated --exit-code 1 || echo "::warning::Some dependencies are outdated"

    - name: Verify no hardcoded secrets
      run: |
        # Basic secret scanning
        if grep -r -E "(password|secret|key|token)\s*[:=]\s*['\"][^'\"]{8,}" --exclude-dir=target --exclude-dir=.git --exclude="*.md" .; then
          echo "::error::Potential hardcoded secrets found"
          exit 1
        fi
        echo "No obvious hardcoded secrets found"

    - name: Check Docker security
      if: matrix.rust == 'stable'
      run: |
        # Install and run hadolint for Dockerfile security
        wget -O hadolint https://github.com/hadolint/hadolint/releases/latest/download/hadolint-Linux-x86_64
        chmod +x hadolint
        ./hadolint Dockerfile || echo "::warning::Dockerfile security issues found"

    - name: Run tests with security focus
      run: |
        # Run tests to ensure security features work
        cargo test --all-features --release
        # Run integration tests if they exist
        if [ -d "tests" ]; then
          cargo test --test "*" --all-features --release
        fi

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Dependency Review
      uses: actions/dependency-review-action@v4
      with:
        # Fail on critical vulnerabilities
        fail-on-severity: critical
        # Allow specific licenses
        allow-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC
        # Deny problematic licenses  
        deny-licenses: GPL-2.0, GPL-3.0, AGPL-1.0, AGPL-3.0

  secret-scanning:
    name: Secret Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run Gitleaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Build Docker image
      run: |
        docker build -t acropolis:security-scan .
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'acropolis:security-scan'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  security-report:
    name: Security Report
    runs-on: ubuntu-latest
    needs: [security-audit, dependency-review, secret-scanning, container-security]
    if: always() && (needs.security-audit.result == 'failure' || needs.dependency-review.result == 'failure' || needs.secret-scanning.result == 'failure' || needs.container-security.result == 'failure')
    
    steps:
    - name: Create security issue
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Security Alert: Issues found in ${context.sha.substring(0, 7)}`,
            body: `
            ## Security Audit Results
            
            One or more security checks failed for commit ${context.sha}.
            
            **Failed Jobs:**
            - Security Audit: ${{ needs.security-audit.result }}
            - Dependency Review: ${{ needs.dependency-review.result }}  
            - Secret Scanning: ${{ needs.secret-scanning.result }}
            - Container Security: ${{ needs.container-security.result }}
            
            Please review the workflow run for details: ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}
            
            **Priority**: High
            **Labels**: security, bug
            `,
            labels: ['security', 'bug', 'high-priority']
          })